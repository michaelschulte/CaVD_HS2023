import re        # Regular Expressions
import datetime  # Datum/Zeit
import os        # Files suchen
import json
# Erklärungen zu diesem Code sind Analog dem Youtube-Extraktor.
rootdir = "C:/Users/Simon.Knaus/OneDrive - Kt. SG BLD/ksbg/Informatik/bigdata/spotify_data"
# Resultat, das am Schluss geschrieben werden soll
csv = ""   # Comma separated values
# Wie viele Kontrollausgaben?
debug = 100
import re        # Regular Expressions
import datetime  # Datum/Zeit
import os        # Files suchen
import json
# Erklärungen zu diesem Code sind Analog dem Youtube-Extraktor.
rootdir = "C:/Users/Simon.Knaus/OneDrive - Kt. SG BLD/ksbg/Informatik/bigdata/spotify_data"
# Resultat, das am Schluss geschrieben werden soll
csv = ""   # Comma separated values
# Wie viele Kontrollausgaben?
debug = 100
# Alle HTML-Dateien im Verzeicznis anzeigen
for root, dirs, files in os.walk(rootdir):
for file in files:
if file.endswith(".json"):
filepath = os.path.join(root, file)
# Datei oeffnen
f = open(filepath, "r")
#html = f.read()  # Alles einlesen
data=json.load(f)
print(data)
f.close()        # Datei schliessen
for d in (data):
# Einträge in Zahlen umwandeln
# Monat plus die anderen Einträge (ohne AM/PM) in Zahlen umgewandelt
#   Die Zeichenkette "42" ist nicht das gleiche wie die Zahl 42.
# Datum daraus generieren (macht die Datumsmanipulation einfacher).
# Jahr, Monat, Tag, Stunde, Minute, Sekunde
if debug>0:
# Ausgabe zur Kontrolle, produziert folgendes Format
print(d["endTime"])   # 2021-01-06 21:23:12
debug -= 1  # Um 1 vermindern
# Formatierte Ausgabe des Datums, siehe https://www.w3schools.com/python/python_datetime.asp
# \n heisst neue Zeile.
csv += str(d["endTime"])+";"+str(d["msPlayed"])+"\n"
# Ausgabe in Datei schreiben
f = open("resultat_spotify.csv", "w")
f.write(csv)
f.close()
ç
ç
import re        # Regular Expressions
import datetime  # Datum/Zeit
import os        # Files suchen
import json
# Erklärungen zu diesem Code sind Analog dem Youtube-Extraktor.
rootdir = "C:/Users/Simon.Knaus/OneDrive - Kt. SG BLD/ksbg/Informatik/bigdata/spotify_data"
# Resultat, das am Schluss geschrieben werden soll
csv = ""   # Comma separated values
# Wie viele Kontrollausgaben?
debug = 100
# Alle HTML-Dateien im Verzeicznis anzeigen
for root, dirs, files in os.walk(rootdir):
for file in files:
if file.endswith(".json"):
filepath = os.path.join(root, file)
# Datei oeffnen
f = open(filepath, "r")
#html = f.read()  # Alles einlesen
data=json.load(f)
print(data)
f.close()        # Datei schliessen
for d in (data):
# Einträge in Zahlen umwandeln
# Monat plus die anderen Einträge (ohne AM/PM) in Zahlen umgewandelt
#   Die Zeichenkette "42" ist nicht das gleiche wie die Zahl 42.
# Datum daraus generieren (macht die Datumsmanipulation einfacher).
# Jahr, Monat, Tag, Stunde, Minute, Sekunde
if debug>0:
# Ausgabe zur Kontrolle, produziert folgendes Format
print(d["endTime"])   # 2021-01-06 21:23:12
debug -= 1  # Um 1 vermindern
# Formatierte Ausgabe des Datums, siehe https://www.w3schools.com/python/python_datetime.asp
# \n heisst neue Zeile.
csv += str(d["endTime"])+";"+str(d["msPlayed"])+"\n"
# Ausgabe in Datei schreiben
f = open("resultat_spotify.csv", "w")
f.write(csv)
f.close()
import re        # Regular Expressions
import datetime  # Datum/Zeit
import os        # Files suchen
import json
# Erklärungen zu diesem Code sind Analog dem Youtube-Extraktor.
rootdir = "C:/Users/Simon.Knaus/OneDrive - Kt. SG BLD/ksbg/Informatik/bigdata/spotify_data"
# Resultat, das am Schluss geschrieben werden soll
csv = ""   # Comma separated values
# Wie viele Kontrollausgaben?
debug = 100
# Alle HTML-Dateien im Verzeicznis anzeigen
for root, dirs, files in os.walk(rootdir):
for file in files:
if file.endswith(".json"):
filepath = os.path.join(root, file)
# Datei oeffnen
f = open(filepath, "r")
#html = f.read()  # Alles einlesen
data=json.load(f)
print(data)
f.close()        # Datei schliessen
for d in (data):
# Einträge in Zahlen umwandeln
# Monat plus die anderen Einträge (ohne AM/PM) in Zahlen umgewandelt
#   Die Zeichenkette "42" ist nicht das gleiche wie die Zahl 42.
# Datum daraus generieren (macht die Datumsmanipulation einfacher).
# Jahr, Monat, Tag, Stunde, Minute, Sekunde
if debug>0:
# Ausgabe zur Kontrolle, produziert folgendes Format
print(d["endTime"])   # 2021-01-06 21:23:12
debug -= 1  # Um 1 vermindern
# Formatierte Ausgabe des Datums, siehe https://www.w3schools.com/python/python_datetime.asp
# \n heisst neue Zeile.
csv += str(d["endTime"])+";"+str(d["msPlayed"])+"\n"
# Ausgabe in Datei schreiben
f = open("resultat_spotify.csv", "w")
f.write(csv)
f.close()
çç
reticulate::source_python('~/git_stuff/CaVD_HS2023/SocialMediaUsage/spotify.py')
reticulate::source_python('~/git_stuff/CaVD_HS2023/SocialMediaUsage/spotify.py')
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
install.packages('transfomer')
install.packages('transformr')
quarters_map <- basel_map %>%
left_join(basel,by = c("TYPE" = "quarter"))
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
# see:
# https://github.com/yihui/xaringan/wiki
# https://github.com/gnab/remark/wiki/Markdown
options(width=110)
options(digits = 4)
# Chunk 2
knitr::opts_chunk$set(comment=NA, fig.width=6, fig.height=6, echo = TRUE, eval = TRUE,
message = FALSE, warning = FALSE, fig.align = 'center', dpi = 200)
library(tidyverse)
library(ggthemes)
library(sf)
require(tidygraph)
require(ggraph)
require(gganimate)
require(plotly)
basel = read_csv('1_Data/taxation.csv')
knitr::opts_chunk$set(comment=NA, fig.width=6, fig.height=6, echo = TRUE, eval = TRUE,
message = FALSE, warning = FALSE, fig.align = 'center', dpi = 200)
library(tidyverse)
library(ggthemes)
library(sf)
require(tidygraph)
require(ggraph)
require(gganimate)
require(plotly)
basel = read_csv('1_Data/taxation.csv')
source("~/git_stuff/CaVD_HS2023/installation.html")
source("~/git_stuff/CaVD_HS2023/installation.html")
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
# see:
# https://github.com/yihui/xaringan/wiki
# https://github.com/gnab/remark/wiki/Markdown
options(width=110)
options(digits = 4)
knitr::opts_chunk$set(comment=NA, fig.width=6, fig.height=6, echo = TRUE, eval = TRUE,
message = FALSE, warning = FALSE, fig.align = 'center', dpi = 200)
library(tidyverse)
library(ggthemes)
library(sf)
require(tidygraph)
require(ggraph)
require(gganimate)
require(plotly)
basel = read_csv('1_Data/taxation.csv')
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
source("~/git_stuff/CaVD_HS2023/index.html")
